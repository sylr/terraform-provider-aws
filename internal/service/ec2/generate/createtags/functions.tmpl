// Code generated by internal/service/ec2/generate/createtags/main.go; DO NOT EDIT.

package {{ .ServicePackage }}

import (
    "context"
	"fmt"
	"time"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/service/{{ .AWSService }}"
	{{- if .AWSServiceIfacePackage }}
	"github.com/aws/aws-sdk-go/service/{{ .AWSServiceIfacePackage }}"
	{{- end }}
	"github.com/hashicorp/aws-sdk-go-base/v2/awsv1shim/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
)

const eventualConsistencyTimeout = 5 * time.Minute

// {{ .CreateTagsFunc }} creates {{ .ServicePackage }} service tags for new resources.
// The identifier is typically the Amazon Resource Name (ARN), although
// it may also be a different identifier depending on the service.
func {{ .CreateTagsFunc }}(conn {{ .ClientType }}, identifier string{{ if .TagResTypeElem }}, resourceType string{{ end }}, tagsMap interface{}) error {
	return {{ .CreateTagsFunc }}WithContext(context.Background(), conn, identifier{{ if .TagResTypeElem }}, resourceType{{ end }}, tagsMap)
}

func {{ .CreateTagsFunc }}WithContext(ctx context.Context, conn {{ .ClientType }}, identifier string{{ if .TagResTypeElem }}, resourceType string{{ end }}, tagsMap interface{}) error {
	tags := tftags.New(tagsMap)

	{{- if .TagOpBatchSize }}
	for _, tags := range tags.Chunks({{ .TagOpBatchSize }}) {
	{{- end }}
	input := &{{ .AWSService }}.{{ .TagOp }}Input{
		{{- if not ( .TagTypeIDElem ) }}
		{{- if .TagInIDNeedSlice }}
		{{ .TagInIDElem }}: aws.StringSlice([]string{identifier}),
		{{- else }}
		{{ .TagInIDElem }}: aws.String(identifier),
		{{- end }}
		{{- if .TagResTypeElem }}
		{{ .TagResTypeElem }}:    aws.String(resourceType),
		{{- end }}
		{{- end }}
		{{- if .TagInCustomVal }}
		{{ .TagInTagsElem }}:       {{ .TagInCustomVal }},
		{{- else }}
		{{ .TagInTagsElem }}:       Tags(tags.IgnoreAWS()),
		{{- end }}
	}

	{{- if .RetryCreateOnNotFound }}

	_, err := tfresource.RetryWhenNotFoundContext(ctx, eventualConsistencyTimeout, func() (interface{}, error) {
		output, err := conn.{{ .TagOp }}WithContext(ctx, input)

		{{ .ParentNotFoundError }}

		return output, err
	})
	{{- else }}
	_, err := conn.{{ .TagOp }}WithContext(ctx, input)
	{{- end }}

	if err != nil {
		return fmt.Errorf("tagging resource (%s): %w", identifier, err)
	}
	{{- if .TagOpBatchSize }}
	}
	{{- end }}

	return nil
}
