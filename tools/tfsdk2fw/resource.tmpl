// Code generated by tools/tfsdk2fw/main.go. Manual editing is required.

package {{ .PackageName }}

import (
    "context"

    {{if .ImportFrameworkAttr }}"github.com/hashicorp/terraform-plugin-framework/attr"{{- end}}
    {{if .EmitResourceImportState }}"github.com/hashicorp/terraform-plugin-framework/path"{{- end}}
    "github.com/hashicorp/terraform-plugin-framework/resource"
    "github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
    "github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	{{if .ImportProviderFrameworkTypes }}"github.com/hashicorp/terraform-provider-aws/internal/fwtypes"{{- end}}
)

func init() {
    registerFrameworkResourceFactory(newResource{{ .Name }})
}

// newResource{{ .Name }} instantiates a new Resource for the {{ .TFTypeName }} resource.
func newResource{{ .Name }}(context.Context) (resource.ResourceWithConfigure, error) {
	return &resource{{ .Name }}{}, nil
}

type resource{{ .Name }} struct {
	meta *conns.AWSClient
}

// Metadata should return the full name of the resource, such as
// examplecloud_thing.
func (r *resource{{ .Name }}) Metadata(_ context.Context, request resource.MetadataRequest, response *resource.MetadataResponse) {
	response.TypeName = "{{ .TFTypeName }}"
}

// GetSchema returns the schema for this resource.
func (r *resource{{ .Name }}) GetSchema(context.Context) (tfsdk.Schema, diag.Diagnostics) {
    schema := {{ .Schema }}

    return schema, nil
}

// Configure enables provider-level data or clients to be set in the
// provider-defined Resource type.
func (r *resource{{ .Name }}) Configure(_ context.Context, request resource.ConfigureRequest, response *resource.ConfigureResponse) {
	if v, ok := request.ProviderData.(*conns.AWSClient); ok {
		r.meta = v
	}
}

// Create is called when the provider must create a new resource.
// Config and planned state values should be read from the CreateRequest and new state values set on the CreateResponse.
func (r *resource{{ .Name }}) Create(ctx context.Context, request resource.CreateRequest, response *resource.CreateResponse) {
	var data resource{{ .Name }}Data

	response.Diagnostics.Append(request.Plan.Get(ctx, &data)...)

	if response.Diagnostics.HasError() {
		return
	}

	data.ID = types.String{Value: "TODO"}

    response.Diagnostics.Append(response.State.Set(ctx, &data)...)
}

// Read is called when the provider must read resource values in order to update state.
// Planned state values should be read from the ReadRequest and new state values set on the ReadResponse.
func (r *resource{{ .Name }}) Read(ctx context.Context, request resource.ReadRequest, response *resource.ReadResponse) {
	var data resource{{ .Name }}Data

	response.Diagnostics.Append(request.State.Get(ctx, &data)...)

	if response.Diagnostics.HasError() {
		return
	}

    response.Diagnostics.Append(response.State.Set(ctx, &data)...)
}

// Update is called to update the state of the resource.
// Config, planned state, and prior state values should be read from the UpdateRequest and new state values set on the UpdateResponse.
func (r *resource{{ .Name }}) Update(ctx context.Context, request resource.UpdateRequest, response *resource.UpdateResponse) {
{{if .EmitResourceUpdateSkeleton }}var old, new resource{{ .Name }}Data

	response.Diagnostics.Append(request.State.Get(ctx, &old)...)

	if response.Diagnostics.HasError() {
		return
	}

	response.Diagnostics.Append(request.Plan.Get(ctx, &new)...)

	if response.Diagnostics.HasError() {
		return
	}

    response.Diagnostics.Append(response.State.Set(ctx, &new)...){{- else}}// Noop.{{- end}}
}

// Delete is called when the provider must delete the resource.
// Config values may be read from the DeleteRequest.
//
// If execution completes without error, the framework will automatically call DeleteResponse.State.RemoveResource(),
// so it can be omitted from provider logic.
func (r *resource{{ .Name }}) Delete(ctx context.Context, request resource.DeleteRequest, response *resource.DeleteResponse) {
	var data resource{{ .Name }}Data

	response.Diagnostics.Append(request.State.Get(ctx, &data)...)

	if response.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, "deleting TODO", map[string]interface{}{
		"id": data.ID.Value,
	})
}

{{if .EmitResourceImportState }}
// ImportState is called when the provider must import the state of a resource instance.
// This method must return enough state so the Read method can properly refresh the full resource.
//
// If setting an attribute with the import identifier, it is recommended to use the ImportStatePassthroughID() call in this method.
func (r *resource{{ .Name }}) ImportState(ctx context.Context, request resource.ImportStateRequest, response *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("id"), request, response)
}
{{- end}}

type resource{{ .Name }}Data struct {
    {{ .Struct }}
}
