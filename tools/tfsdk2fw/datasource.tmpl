// Code generated by tools/tfsdk2fw/main.go. Manual editing is required.

package {{ .PackageName }}

import (
    "context"

    {{if .ImportFrameworkAttr }}"github.com/hashicorp/terraform-plugin-framework/attr"{{- end}}
    "github.com/hashicorp/terraform-plugin-framework/datasource"
    "github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
    "github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	{{if .ImportProviderFrameworkTypes }}"github.com/hashicorp/terraform-provider-aws/internal/fwtypes"{{- end}}
)

func init() {
    registerFrameworkDataSourceFactory(newDataSource{{ .Name }})
}

// newDataSource{{ .Name }} instantiates a new DataSource for the {{ .TFTypeName }} data source.
func newDataSource{{ .Name }}(context.Context) (datasource.DataSourceWithConfigure, error) {
	return &dataSource{{ .Name }}{}, nil
}

type dataSource{{ .Name }} struct {
	meta *conns.AWSClient
}

// Metadata should return the full name of the data source, such as
// examplecloud_thing.
func (d *dataSource{{ .Name }}) Metadata(_ context.Context, request datasource.MetadataRequest, response *datasource.MetadataResponse) {
	response.TypeName = "{{ .TFTypeName }}"
}

// GetSchema returns the schema for this data source.
func (d *dataSource{{ .Name }}) GetSchema(context.Context) (tfsdk.Schema, diag.Diagnostics) {
    schema := {{ .Schema }}

    return schema, nil
}

// Configure enables provider-level data or clients to be set in the
// provider-defined DataSource type. It is separately executed for each
// ReadDataSource RPC.
func (d *dataSource{{ .Name }}) Configure(_ context.Context, request datasource.ConfigureRequest, response *datasource.ConfigureResponse) {
	if v, ok := request.ProviderData.(*conns.AWSClient); ok {
		d.meta = v
	}
}

// Read is called when the provider must read data source values in order to update state.
// Config values should be read from the ReadRequest and new state values set on the ReadResponse.
func (d *dataSource{{ .Name }}) Read(ctx context.Context, request datasource.ReadRequest, response *datasource.ReadResponse) {
	var data dataSource{{ .Name }}Data

	response.Diagnostics.Append(request.Config.Get(ctx, &data)...)

	if response.Diagnostics.HasError() {
		return
	}

	data.ID = types.String{Value: "TODO"}

    response.Diagnostics.Append(response.State.Set(ctx, &data)...)
}

type dataSource{{ .Name }}Data struct {
    {{ .Struct }}
}